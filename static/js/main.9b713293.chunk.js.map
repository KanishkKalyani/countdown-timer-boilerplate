{"version":3,"sources":["logo.svg","components/Clock.jsx","components/CountdownForm.jsx","components/Countdown.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Clock","props","startTimer","timeInSeconds","clock","setInterval","setState","timeInSec","state","displayTime","formatTime","setTimeout","clearInterval","resetCount","seconds","minutes","Math","floor","this","className","React","Component","CountdownForm","e","preventDefault","secondsStr","refs","value","timeAdded","parseInt","onSetCountdownTime","ref","onSubmit","bind","type","placeholder","Countdown","count","style","position","val","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yKAAAA,EAAOC,QAAU,IAA0B,kC,8KC0D5BC,G,wDAvDd,WAAYC,GAAQ,IAAD,8BAClB,cAAMA,IAqBPC,WAAa,WAAO,IACXC,EAAkB,EAAKF,MAAvBE,cACR,EAAKC,MAAQC,aAAY,WACxB,EAAKC,SAAS,CACbC,UAAW,EAAKC,MAAMD,UAAY,EAClCE,YAAa,EAAKC,WAAW,EAAKF,MAAMD,UAAY,OAEnD,KAEHI,YAAW,WACVC,cAAc,EAAKR,OACnB,EAAKH,MAAMY,eACa,KAArBV,EAAgB,KAhCpB,EAAKK,MAAQ,CACZC,YAAa,GACbF,UAAW,GAJM,E,uDAORJ,GACV,IAAIW,EAAUX,EAAgB,GAC1BY,EAAUC,KAAKC,MAAMd,EAAgB,IAUzC,OARIW,EAAU,KACbA,EAAU,IAAMA,GAGbC,EAAU,KACbA,EAAU,IAAMA,GAGVA,EAAU,IAAMD,I,0CAmBvBI,KAAKZ,SAAS,CAAEC,UAAWW,KAAKjB,MAAME,cAAgB,IAClDe,KAAKjB,MAAME,cAAgB,GAAGe,KAAKhB,e,+BAG9B,IAAD,EAC2BgB,KAAKV,MAAhCC,EADA,EACAA,YAAaF,EADb,EACaA,UAErB,OACC,yBAAKY,UAAU,yBACd,0BAAMA,UAAU,0BACA,IAAdZ,GAAmBE,Q,GAjDLW,IAAMC,YCkCXC,G,6KAjCLC,GAERA,EAAEC,iBACF,IAAIC,EAAaP,KAAKQ,KAAKZ,QAAQa,MAC7BC,EAAYC,SAASJ,GACR,KAAfA,GAAqBG,EAAY,GACpCV,KAAKjB,MAAM6B,mBAAmBF,K,+BAI/B,OACC,6BACC,0BACCG,IAAI,OACJC,SAAUd,KAAKc,SAASC,KAAKf,MAC7BC,UAAU,4BACV,2BACCe,KAAK,OACLH,IAAI,UACJZ,UAAU,aACVgB,YAAY,0BAEb,2BACCD,KAAK,SACLf,UAAU,uCACVQ,MAAM,0B,GA1BgBP,IAAMC,YC+BnBe,E,kDA5Bd,WAAYnC,GAAQ,IAAD,8BAClB,cAAMA,IAMPY,WAAa,WACZ,EAAKP,SAAS,CAAE+B,MAAO,KANvB,EAAK7B,MAAQ,CACZ6B,MAAO,GAHU,E,qDAWT,IAAD,OACAA,EAAUnB,KAAKV,MAAf6B,MACR,OACC,yBAAKC,MAAO,CAAEC,SAAU,aACZ,IAAVF,GACA,kBAAC,EAAD,CAAOlC,cAAekC,EAAOxB,WAAYK,KAAKL,aAE/C,kBAAC,EAAD,CACCiB,mBAAoB,SAAAU,GAAG,OACD,IAArB,EAAKhC,MAAM6B,OAAe,EAAK/B,SAAS,CAAE+B,MAAOG,Y,GArB/BpB,IAAMC,WCQfoB,MARf,WACE,OACE,yBAAKtB,UAAU,OACd,kBAAC,EAAD,QCKeuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.9b713293.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React from \"react\";\r\nimport \"./Clock.css\";\r\nclass Clock extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tdisplayTime: \"\",\r\n\t\t\ttimeInSec: 0,\r\n\t\t};\r\n\t}\r\n\tformatTime(timeInSeconds) {\r\n\t\tvar seconds = timeInSeconds % 60;\r\n\t\tvar minutes = Math.floor(timeInSeconds / 60);\r\n\r\n\t\tif (seconds < 10) {\r\n\t\t\tseconds = \"0\" + seconds;\r\n\t\t}\r\n\r\n\t\tif (minutes < 10) {\r\n\t\t\tminutes = \"0\" + minutes;\r\n\t\t}\r\n\r\n\t\treturn minutes + \":\" + seconds;\r\n\t}\r\n\r\n\tstartTimer = () => {\r\n\t\tconst { timeInSeconds } = this.props;\r\n\t\tthis.clock = setInterval(() => {\r\n\t\t\tthis.setState({\r\n\t\t\t\ttimeInSec: this.state.timeInSec - 1,\r\n\t\t\t\tdisplayTime: this.formatTime(this.state.timeInSec - 1),\r\n\t\t\t});\r\n\t\t}, 1000);\r\n\r\n\t\tsetTimeout(() => {\r\n\t\t\tclearInterval(this.clock);\r\n\t\t\tthis.props.resetCount();\r\n\t\t}, (timeInSeconds + 1) * 1000);\r\n\t};\r\n\r\n\tcomponentDidMount() {\r\n\t\tthis.setState({ timeInSec: this.props.timeInSeconds + 1 });\r\n\t\tif (this.props.timeInSeconds > 0) this.startTimer();\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst { displayTime, timeInSec } = this.state;\r\n\t\t//Keep the classes name. Try to inject your code and do not remove existing code\r\n\t\treturn (\r\n\t\t\t<div className=\"clock clock-container\">\r\n\t\t\t\t<span className=\"clock-text clock-value\">\r\n\t\t\t\t\t{timeInSec !== 0 && displayTime}\r\n\t\t\t\t</span>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Clock;\r\n","import React from \"react\";\r\nimport \"./FormStyling.css\";\r\nclass CountdownForm extends React.Component {\r\n\tonSubmit(e) {\r\n\t\t//This will give you string for seconds. Do not remove refs\r\n\t\te.preventDefault();\r\n\t\tvar secondsStr = this.refs.seconds.value;\r\n\t\tconst timeAdded = parseInt(secondsStr);\r\n\t\tif (secondsStr !== \"\" && timeAdded > 0)\r\n\t\t\tthis.props.onSetCountdownTime(timeAdded);\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<form\r\n\t\t\t\t\tref=\"form\"\r\n\t\t\t\t\tonSubmit={this.onSubmit.bind(this)}\r\n\t\t\t\t\tclassName=\"countdown-form form-body\">\r\n\t\t\t\t\t<input\r\n\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\tref=\"seconds\"\r\n\t\t\t\t\t\tclassName=\"enter-text\"\r\n\t\t\t\t\t\tplaceholder=\"Enter time in seconds\"\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<input\r\n\t\t\t\t\t\ttype=\"submit\"\r\n\t\t\t\t\t\tclassName=\"button success expanded timer-button\"\r\n\t\t\t\t\t\tvalue=\"Start Countdown\"\r\n\t\t\t\t\t/>\r\n\t\t\t\t</form>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default CountdownForm;\r\n","import React from \"react\";\r\nimport Clock from \"./Clock\";\r\nimport CountdownForm from \"./CountdownForm\";\r\n\r\nclass Countdown extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tcount: 0,\r\n\t\t};\r\n\t}\r\n\r\n\tresetCount = () => {\r\n\t\tthis.setState({ count: 0 });\r\n\t};\r\n\r\n\trender() {\r\n\t\tconst { count } = this.state;\r\n\t\treturn (\r\n\t\t\t<div style={{ position: \"relative\" }}>\r\n\t\t\t\t{count !== 0 && (\r\n\t\t\t\t\t<Clock timeInSeconds={count} resetCount={this.resetCount} />\r\n\t\t\t\t)}\r\n\t\t\t\t<CountdownForm\r\n\t\t\t\t\tonSetCountdownTime={val =>\r\n\t\t\t\t\t\tthis.state.count === 0 && this.setState({ count: val })\r\n\t\t\t\t\t}\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Countdown;\r\n","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport Countdown from \"./components/Countdown\";\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n     <Countdown></Countdown>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}